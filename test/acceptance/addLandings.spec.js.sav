import * as DotEnv from 'dotenv';
DotEnv.config();
const baseUrl = process.env.BASE_URL;

import * as chai from 'chai';
const expect = chai.expect;

const Nightmare = require('nightmare');

describe('Add species error statuses', function () {

  function goToLandingPage(nm) {
    return nm
      .goto(baseUrl + '/add-species')
      .wait('body')
      .type('.form-control', 'Giant shark carp')
      .click('[name=btn_submit]')
      .wait('#presentation')
      .select('#presentation', 'CLA')
      .select('#state', 'BOI')
      .click('[name=btn_submit]')
      .wait('#commodity_code')
      .select('#commodity_code', '30363300')
      .click('[name=btn_submit]')
      .wait('[name=add_new]')
      .click('#add-landings')
      .wait('body')
  }

  function addLanding(vessel, date, weight) {
    return this
      .type('[name=weight]', weight)
      .wait(50)
      .type('[name=vessel]', vessel)
      .wait(50)
      .type('[name=date]', date)
      .wait(50)
      .click('[name=add_new]')
      .wait(500)
  }

  Nightmare.prototype.addLanding = addLanding;

  it('displays an error if submitted without entering a catch', function () {
    this.timeout('10s');
    const nightmare = new Nightmare(/*{ show: true }*/);
    return goToLandingPage(nightmare)
      .click('[name=btn_submit]')
      .wait('.error-summary-list')
      .evaluate(() => {
        let eI = Array.from(document.querySelectorAll('.error-summary-list a'))
          .reduce((accumulator, el) => {
            return accumulator + (accumulator ? ' ' : '') + el.innerHTML;
          }, '');
        let eM = Array.from(document.querySelectorAll('.error-message'))
          .reduce((accumulator, el) => {
            return accumulator + (accumulator ? ' ' : '') + el.innerHTML;
          }, '');
        return {
          errorIsland: eI,
          errorMessage: eM
        }
      })
      .end()
      .then((obj) => {
        expect(obj.errorIsland).to.equal('Please enter a date Please enter a vessel There\'s a problem with weight');
        return expect(obj.errorMessage).to.equal('Please enter a vessel Please enter a date There\'s a problem with weight');
      })
  });

  it('you can close the form by pressing cancel', function () {
    this.timeout('10s');
    const nightmare = new Nightmare(/*{ show: true }*/);
    return goToLandingPage(nightmare)
      .click('#cancel')
      .evaluate(() => {
        return document.querySelector('form')
      })
      .end()
      .then((thing) => {
        return expect(thing).to.be.null;
      })
  });

  it('updates the weight when you add catches', function () {
    this.timeout('30s');
    const nightmare = new Nightmare();
    return goToLandingPage(nightmare)
      .addLanding('TJERDA', '24/02/18', 22.5)
      .addLanding('Sea Fritter', '24/02/18', 10)
      .evaluate(() => {
        return document.querySelector('h2.heading-small.text-right').innerHTML
      })
      .end()
      .then((w) => {
        return expect(w).to.equal('32.5');
      })
  });

  it('allows you to remove a landing', function () {
    this.timeout('30s');
    const nightmare = new Nightmare(/*{ show: true }*/);
    return goToLandingPage(nightmare)
      .addLanding('TJERDA', '24/02/18', 22.5)
      .addLanding('Sea Fritter', '24/02/18', 10)
      .click('.actions.column-one-quarter form [name=btn_submit]')
      .wait(50)
      .evaluate(() => {
        return Array.from(document.querySelectorAll('.vessel-date-weight-entry-block .read-only')).length;
      })
      .end()
      .then((n) => {
        return expect(n).to.equal(1);
      })
  });

  it('allows you to edit a landing', function () {
    this.timeout('30s');
    const nightmare = new Nightmare(/*{ show: true }*/);
    return goToLandingPage(nightmare)
      .addLanding('TJERDA', '24/02/18', 22.5)
      .addLanding('Sea Fritter', '24/02/18', 10)
      .click('.actions.column-one-quarter form [name=btn_submit]')
      .wait(50)
      .evaluate(() => {
        return Array.from(document.querySelectorAll('.vessel-date-weight-entry-block .read-only')).length;
      })
      .end()
      .then((n) => {
        return expect(n).to.equal(1);
      })
  });

});