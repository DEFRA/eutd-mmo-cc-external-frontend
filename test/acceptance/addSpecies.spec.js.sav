import * as DotEnv from 'dotenv';
DotEnv.config();
const baseUrl = process.env.BASE_URL;

import * as chai from 'chai';
const expect = chai.expect;

const Nightmare = require('nightmare');

describe('Add species error statuses', function () {

  it('displays an error if submitted without entering a species', function() {
    this.timeout('10s');
    const nightmare = new Nightmare();
    return nightmare
      .goto(baseUrl + '/add-species')
      .wait('body')
      .click('[name=btn_submit]')
      .wait('.error-summary-list')
      .evaluate(() => {
        return {
          errorIsland: document.querySelector('.error-summary-list li:first-child a').innerHTML,
          errorMessage: document.querySelector('.error-message').innerHTML
        }
      })
      .end()
      .then(stuff => {
        expect(stuff.errorIsland).to.equal('Please enter a species');
        return expect(stuff.errorMessage).to.equal('Please enter a species');
      })
  });

  it('displays an error if submitted without entering a state or presentation', function() {
    this.timeout('15s');
    const nightmare = new Nightmare();
    return nightmare
      .goto(baseUrl + '/add-species')
      .wait('body')
      .type('.form-control', 'Giant shark carp')
      .click('[name=btn_submit]')
      .wait('#presentation')
      .click('[name=btn_submit]')
      .wait('.error-summary-list')
      .evaluate(() => {
        return {
          errorIsland: {
            first: document.querySelector('.error-summary-list li:nth-child(1) a').innerHTML,
            second: document.querySelector('.error-summary-list li:nth-child(2) a').innerHTML
          },
          errorMessage1: document.querySelectorAll('.error-message')[0].innerHTML,
          errorMessage2: document.querySelectorAll('.error-message')[1].innerHTML
        }
      })
      .end()
      .then(stuff => {
        expect(stuff.errorIsland.first).to.equal('Please enter a state');
        expect(stuff.errorIsland.second).to.equal('Please enter a presentation');
        expect(stuff.errorMessage1).to.equal('Please enter a presentation');
        expect(stuff.errorMessage2).to.equal('Please enter a state');
      })
  });

  it('displays an error if submitted without entering a commodity code', function() {
    this.timeout('15s');
    const nightmare = new Nightmare();
    return nightmare
      .goto(baseUrl + '/add-species')
      .wait('body')
      .type('.form-control', 'Giant shark carp')
      .click('[name=btn_submit]')
      .wait('#presentation')
      .select('#presentation', 'CLA')
      .select('#state', 'BOI')
      .click('[name=btn_submit]')
      .wait('#commodity_code')
      .select('#commodity_code', null)
      .click('[name=btn_submit]')
      .wait('.error-summary-list')
      .evaluate(() => {
        return {
          errorIsland: {
            first: document.querySelector('.error-summary-list li:nth-child(1) a').innerHTML
          },
          errorMessage1: document.querySelectorAll('.error-message')[0].innerHTML
        }
      })
      .end()
      .then(stuff => {
        expect(stuff.errorIsland.first).to.equal('Please enter a commodity');
        expect(stuff.errorMessage1).to.equal('Please enter a commodity');
      })
  });


  it('has no cancel button at the very beginning', function() {
    this.timeout('15s');
    const nightmare = new Nightmare();
    return nightmare
      .goto(baseUrl + '/add-species')
      .wait('body')
      .evaluate(() => {
        return document.querySelector('[name=cancel]')
      })
      .end()
      .then(canc => {
        expect(canc).to.be.null;
      })
  });

  it('has a cancel button after you enter the species', function() {
    this.timeout('15s');
    const nightmare = new Nightmare();
    return nightmare
      .goto(baseUrl + '/add-species')
      .wait('body')
      .type('.form-control', 'Giant shark carp')
      .click('[name=btn_submit]')
      .wait('[name=cancel]')
      .evaluate(() => {
        return document.querySelector('[name=cancel]').innerHTML
      })
      .end()
      .then(canc => {
        expect(canc).to.equal('Cancel')
      })
  });

  it('has a functioning cancel button after you enter the species', function() {
    this.timeout('15s');
    const nightmare = new Nightmare();
    return nightmare
      .goto(baseUrl + '/add-species')
      .wait('body')
      .type('.form-control', 'Giant shark carp')
      .click('[name=btn_submit]')
      .wait('[name=cancel]')
      .click('[name=cancel]')
      .wait('#species')
      .evaluate(() => {
        return document.querySelector('#species').value;
      })
      .end()
      .then(box => {
        expect(box).to.equal('')
      })
  });

  it('has a cancel button after you enter species and presentation', function() {
    this.timeout('15s');
    const nightmare = new Nightmare();
    return nightmare
      .goto(baseUrl + '/add-species')
      .wait('body')
      .type('.form-control', 'Giant shark carp')
      .click('[name=btn_submit]')
      .wait('#presentation')
      .select('#presentation', 'CLA')
      .select('#state', 'BOI')
      .click('[name=btn_submit]')
      .wait('#commodity_code')
      .evaluate(() => {
        return document.querySelector('[name=cancel]').innerHTML
      })
      .end()
      .then(canc => {
        expect(canc).to.equal('Cancel')
      })
  });

  it('has a functioning cancel button after you enter species and presentation', function() {
    this.timeout('15s');
    const nightmare = new Nightmare();
    return nightmare
      .goto(baseUrl + '/add-species')
      .wait('body')
      .type('.form-control', 'Giant shark carp')
      .click('[name=btn_submit]')
      .wait('#presentation')
      .select('#presentation', 'CLA')
      .select('#state', 'BOI')
      .click('[name=btn_submit]')
      .wait('#commodity_code')
      .click('[name=cancel]')
      .wait('#species')
      .evaluate(() => {
        return document.querySelector('#species').value;
      })
      .end()
      .then(box => {
        expect(box).to.equal('');
      })
  });

  it('has a cancel button after you enter species and presentation and commodity code', function() {
    this.timeout('15s');
    const nightmare = new Nightmare();
    return nightmare
      .goto(baseUrl + '/add-species')
      .wait('body')
      .type('.form-control', 'Giant shark carp')
      .click('[name=btn_submit]')
      .wait('#presentation')
      .select('#presentation', 'CLA')
      .select('#state', 'BOI')
      .click('[name=btn_submit]')
      .wait('#commodity_code')
      .select('#commodity_code', '30363300')
      .click('[name=btn_submit]')
      .wait('[name=add_new]')
      .click('[name=cancel]')
      .wait('#species')
      .evaluate(() => {
        return document.querySelector('#species').value;
      })
      .end()
      .then(box => {
        expect(box).to.equal('');
      })
  });

  it('has an add new button', function() {
    this.timeout('15s');
    const nightmare = new Nightmare();
    return nightmare
      .goto(baseUrl + '/add-species')
      .wait('body')
      .type('.form-control', 'Giant shark carp')
      .click('[name=btn_submit]')
      .wait('#presentation')
      .select('#presentation', 'CLA')
      .select('#state', 'BOI')
      .click('[name=btn_submit]')
      .wait('#commodity_code')
      .select('#commodity_code', '30363300')
      .click('[name=btn_submit]')
      .wait('[name=add_new]')
      .evaluate(() => {
        return document.querySelector('[name=add_new]').innerHTML;
      })
      .end()
      .then(btn => {
        expect(btn).to.equal('Add another species');
      })
  });

  it('has a functioning add new button', function() {
    this.timeout('15s');
    const nightmare = new Nightmare();
    return nightmare
      .goto(baseUrl + '/add-species')
      .wait('body')
      .type('.form-control', 'Giant shark carp')
      .click('[name=btn_submit]')
      .wait('#presentation')
      .select('#presentation', 'CLA')
      .select('#state', 'BOI')
      .click('[name=btn_submit]')
      .wait('#commodity_code')
      .select('#commodity_code', '30363300')
      .click('[name=btn_submit]')
      .wait('[name=add_new]')
      .click('[name=add_new]')
      .wait('#species')
      .evaluate(() => {
        return document.querySelectorAll('.adding-species').length;
      })
      .end()
      .then(len => {
        expect(len).to.equal(2);
      })
  });

});