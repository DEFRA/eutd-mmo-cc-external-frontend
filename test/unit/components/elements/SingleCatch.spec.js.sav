// TODO - convert to jest/Enzyme
import { renderComponent , expect } from '../../test_helper';
import SingleCatch from '../../../../src/client/components/SingleCatch';

describe('Single catch', () => {
  let component;

  const props = {
    hide: [],
    vessel:'TJERDA',
    area:'F34',
    presentation: 'FIL',
    landing_port: 'Hartpool',
    date: '23/11/2014',
    species: 'Carp',
    pln: 'jackfruit2',
    weight: '3',
    id: '1',
    licence_number: 'bigWatermelon',
    user_id: '8ee3264c-51f3-4fbd-8473-5f29b8136f75',
    state: 'FRO',
    commodity_code: 'bigSalad'
  };

  beforeEach(() => {
    component = renderComponent(SingleCatch, props);
  });

  it('renders something', () => {
    expect(component).to.exist;
  });

  describe('Presentation', () => {
    it('has a presentation cell', () => {
      expect($(component).find('td.presentation').length).to.equal(1);
      expect($(component).find('td.presentation span').text()).to.equal('Filleted');
    });
    it('the presentation cell is not rendered if specified', () => {
      let prp = {...props};
      prp.hide = ['presentation'];
      component = renderComponent(SingleCatch, prp);
      expect($(component).find('td.presentation').length).to.equal(0);
    });
    it('renders the presentation with a dropdown if editable', () => {
      let prp = {...props};
      prp.editableDetails = ['presentation'];
      component = renderComponent(SingleCatch, prp);
      expect($(component).find('td.presentation').length).to.equal(1);
      expect($(component).find('td.presentation select').length).to.equal(1);
    });
  });
  describe('Weight', () => {
    it('has a enter weight cell', () => {
      expect($(component).find('td.enterConsignedWeight').length).to.equal(1);
      expect($(component).find('td.enterConsignedWeight span').text()).to.equal('3');
    });
    it('the weight cell is not rendered if specified', () => {
      let prp = {...props};
      prp.hide = ['remove', 'enterConsignedWeight', 'presentation'];
      component = renderComponent(SingleCatch, prp);
      expect($(component).find('td.enterConsignedWeight').length).to.equal(0);
    });
    it('renders the presentation with an input box if editable', () => {
      let prp = {...props};
      prp.editableDetails = ['enterConsignedWeight'];
      component = renderComponent(SingleCatch, prp);
      expect($(component).find('td.enterConsignedWeight').length).to.equal(1);
      expect($(component).find('td.enterConsignedWeight input').length).to.equal(1);
      expect($(component).find('td.enterConsignedWeight input').val()).to.equal('3');
    });
  });
  describe('State', () => {
    it('has a state cell', () => {
      expect($(component).find('td.state').length).to.equal(1);
      expect($(component).find('td.state span').text()).to.equal('Frozen');
    });
    it('the state cell is not rendered if specified', () => {
      let prp = {...props};
      prp.hide = ['state'];
      component = renderComponent(SingleCatch, prp);
      expect($(component).find('td.state').length).to.equal(0);
    });
    it('renders the state with a dropdown if editable', () => {
      let prp = {...props};
      prp.editableDetails = ['state'];
      component = renderComponent(SingleCatch, prp);
      expect($(component).find('td.state').length).to.equal(1);
      expect($(component).find('td.state select').length).to.equal(1);
    });
  });
  describe('The add button', () => {
    it('has an add button with a little form to submit itself', () => {
      expect($(component).find('td.add').length).to.equal(1);
      expect($(component).find('td.add form').length).to.equal(1);
      expect($(component).find('td.add form button').length).to.equal(1);
    });
    it('the add button is not shown if hidden', () => {
      let prp = {...props};
      prp.hide = ['state','add', 'remove'];
      component = renderComponent(SingleCatch, prp);
      expect($(component).find('td.add').length).to.equal(0);
    });
  });
  describe('The remove button', () => {
    it('has an remove button with a little form to submit itself', () => {
      expect($(component).find('td.remove').length).to.equal(1);
      expect($(component).find('td.remove form').length).to.equal(1);
      expect($(component).find('td.remove form button').length).to.equal(1);
    });
    it('the remove button is not shown if hidden', () => {
      let prp = {...props};
      prp.hide = ['state','remove', 'remove'];
      component = renderComponent(SingleCatch, prp);
      expect($(component).find('td.remove').length).to.equal(0);
    });
  });
});
